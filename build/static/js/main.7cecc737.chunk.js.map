{"version":3,"sources":["components/Header.js","components/Label.js","components/Input.js","components/SearchForm.js","components/Button.js","components/ContactForm.js","components/Contact.js","services/contacts.js","components/Contacts.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","Label","text","Input","handleChange","value","onChange","SearchForm","handleFilterChange","filter","Button","type","handleClick","id","onClick","ContactForm","props","addNew","handleNameChange","handlePhoneNumberChange","name","number","onSubmit","Contact","contact","handleDeleteClick","toggleActive","active","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Contacts","contacts","setContacts","messages","setMessages","contactsToShow","length","toLowerCase","includes","contact_id","newContact","find","changedContact","contactService","returnedContact","map","c","newMessage","error","success","concat","setTimeout","catch","errorr","message","className","window","confirm","n","deleteContact","key","Notification","errorStyle","color","fontSize","background","borderRadius","borderStyle","padding","marginBottom","successStyle","index","console","log","style","App","useState","setName","setNumber","setFilter","useEffect","returnedContacts","isArrayEmpty","array","bool","object","isTextEmpty","contactFormProps","event","preventDefault","alert","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7cecc737.chunk.js","sourcesContent":["import  React from 'react'\n\nconst Header = ({title}) => <h2>{title}</h2>\n\nexport default Header","\nimport React from 'react'\n\nconst Label = ({text}) => <label>{text}</label>\n\nexport default Label\n","import React from 'react'\n\nconst Input = ({handleChange, value}) => <input onChange={handleChange} value={value} />\n\nexport default Input","import React from 'react'\nimport Label from './Label'\nimport Input from './Input'\n\nconst SearchForm = ({handleFilterChange, filter}) => {\n    return(\n      <form>\n        <Label text={'filter shown with:'} />\n        <Input handleChange={handleFilterChange} value={filter} />\n      </form>\n    )\n  }\n\nexport default SearchForm","import React from 'react'\n\nconst Button = ({text, type, handleClick, id}) => <button id={id} onClick={handleClick} type={type}>{text}</button>\n\nexport default Button","import React from 'react'\nimport Button from './Button'\nimport Label from './Label'\nimport Input from './Input'\n\nconst ContactForm = (props) => {\n    const {\n      addNew,\n      handleNameChange,\n      handlePhoneNumberChange,\n      name,\n      number\n    } = props\n  \n    return(\n      <form onSubmit={addNew}>\n        <Label text={'Name:'} />\n        <Input handleChange={handleNameChange} value={name} />\n        <br />\n        <Label text={'Number:'} />\n        <Input handleChange={handlePhoneNumberChange} value={number} />\n        <br />\n        <Button type={'submit'} text={'Add'} />\n      </form>\n    )\n  }\n\n  export default ContactForm","import React from 'react';\nimport Button from './Button'\n\nconst Contact = ({contact, handleDeleteClick, toggleActive}) => {\n\n    return(\n      <tr>\n        <td>{contact.name}</td>\n        <td>{contact.number}</td>\n        <td><Button text={'X'} handleClick={() => handleDeleteClick(contact.id)} /></td>\n        <td><Button text={contact.active ? 'deactivate' : 'activate'} handleClick={() => toggleActive(contact.id)} /></td>\n      </tr>\n    )\n  }\n\nexport default Contact","import axios from 'axios'\n\nconst baseUrl = \"/api/persons\"\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default {\n    getAll,\n    create,\n    update,\n    remove\n}","import React from 'react'\nimport Contact from './Contact'\nimport contactService from '../services/contacts'\n\nconst Contacts = ({contacts, filter, setContacts, messages, setMessages}) => {\n\n    const isEmpty = (str) => str.length === 0\n  \n    const contactsToShow = isEmpty(filter) ? contacts : contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\n  \n    const deleteContact = (contact_id) => {\n      const contact = contacts.find(c => c.id === contact_id)\n      if(window.confirm(`Delete ${contact.name} ?`)){\n        contactService.remove(contact_id).then(returnedContact => {\n          setContacts(contacts.filter(n => n.id !== contact_id))\n          const newMessage = {\n            error: '',\n            success: `${contact.name} is deleted successfully`\n          }\n          setMessages(messages.concat(newMessage))\n          setTimeout(() => {\n            setMessages([])\n          }, 3000);\n\n        }).catch(errorr => {\n          const newMessage = {\n            error: `Information of ${contact.name} has already been removed from server`,\n            success: ''\n          }\n          setMessages(messages.concat(newMessage))\n          setTimeout(() => {\n            setMessages([])\n          }, 3000);\n        })\n      }\n      \n    }\n\n    const toggleActive = (contact_id) => {\n      const newContact = contacts.find(contact => contact.id === contact_id)\n      const changedContact = {...newContact, active: !newContact.active}\n      contactService.update(contact_id, changedContact).then(returnedContact => {\n        setContacts(contacts.map(c => c.id !== contact_id ? c : returnedContact ))\n        const newMessage = {\n          error: '',\n          success: `${returnedContact.name} is ${returnedContact.active ? 'activated' : 'deactivated'} successfully`\n        }\n        setMessages(messages.concat(newMessage))\n        setTimeout(() => {\n          setMessages([])\n        }, 3000);\n      }).catch(errorr => {\n        const newMessage = {\n          error: errorr.message,\n          success: ''\n        }\n        setMessages(messages.concat(newMessage))\n        setTimeout(() => {\n          setMessages([])\n        }, 3000);\n      })\n    }\n\n    const contactList = () => contactsToShow.map(contact => { \n      return(<Contact toggleActive={toggleActive} handleDeleteClick={()=>deleteContact(contact.id)} key={contact.id} contact={contact} />)\n    })\n  \n    return(\n      <table className='phonetable'>\n        <tbody>\n          {contactList()}\n        </tbody>\n      </table>\n    )\n  }\n\n  export default Contacts","import React from 'react'\n\nconst Notification = ({messages}) => {\n\n    const errorStyle = {\n      color: 'red',\n      fontSize: '20px',\n      background: 'lightgrey',\n      borderRadius: '5px',\n      borderStyle: 'solid',\n      padding: '10px',\n      marginBottom: '10px'\n    }\n\n    const successStyle = {\n      color: 'green',\n      fontSize: '20px',\n      background: 'lightgrey',\n      borderRadius: '10px',\n      borderStyle: 'solid',\n      padding: '10px',\n      marginBottom: '10px'\n    }\n  \n    if(messages.length === 0 ){\n      return []\n    }\n  \n    const newMessages = () => {\n      return messages.map((message, index) => {\n        console.log(message)\n        if(message.success !== ''){\n          return(\n            <div key={index} style={successStyle}>\n              <div className='success'>{message.success}</div>\n            </div>\n          )\n        }\n        if(message.error !== ''){\n          return(\n            <div key={index} style={errorStyle}>\n              <div className='error'>{message.error}</div>\n            </div>\n          )\n        }\n      })\n    }\n  \n    return(\n      <div>\n        {newMessages()}\n      </div>\n    )\n  \n  }\n\nexport default Notification","import React,{useState, useEffect} from 'react'\nimport Header from './components/Header'\nimport SearchForm from './components/SearchForm'\nimport ContactForm from './components/ContactForm'\nimport Contacts from './components/Contacts'\nimport contactService from './services/contacts'\nimport Notification from './components/Notification'\n\n\nconst App = () => {\n\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n  const [contacts, setContacts] = useState([])\n  const [filter, setFilter] = useState('')\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    contactService.getAll().then(returnedContacts => {\n      setContacts(returnedContacts)\n    }).catch(errorr => {\n      const newMessage = {\n        error: errorr.message,\n        success: ''\n      }\n      setMessages(messages.concat(newMessage))\n      setTimeout(() => {\n        setMessages([])\n      }, 3000);\n    })\n  },[])\n\n  const addNew = (event) => {\n    event.preventDefault()\n    const newContact = {\n      name: name,\n      number: number,\n      active: true\n    }\n\n    if(isTextEmpty(name)){\n      return alert('Name cannot be blank')\n    }\n\n    if(isTextEmpty(number)){\n      return alert('Number cannot be blank')\n    }\n\n    if(isArrayEmpty(contacts)){\n      return alert(`${name} already exist`)\n    }\n    contactService.create(newContact).then(returnedContact => {\n      console.log(returnedContact)\n      setContacts(contacts.concat(returnedContact))\n      setName('')\n      setNumber('')\n      const newMessage = {\n        error: '',\n        success: `Added ${newContact.name}`\n      }\n      setMessages(messages.concat(newMessage))\n      setTimeout(() => {\n        setMessages([])\n      }, 3000);\n    }).catch(errorr => {\n      const newMessage = {\n        error: errorr.message,\n        success: ''\n      }\n      setMessages(messages.concat(newMessage))\n      setTimeout(() => {\n        setMessages([])\n      }, 3000);\n    })\n  }\n\n  const isArrayEmpty = (array) => {\n    let bool = false\n    if(array.filter(object => object.name === name ).length > 0){\n      bool = true\n    }\n    return bool\n  }\n\n  const isTextEmpty = (text) => {\n    let bool = false\n    if(text === \"\"){\n      bool = true\n    }\n    return bool\n  }\n\n  const handleNameChange = (event) => {\n    setName(event.target.value)\n  }\n\n  const handlePhoneNumberChange = (event) => {\n    setNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  const contactFormProps = {\n    addNew,\n    handleNameChange,\n    handlePhoneNumberChange,\n    name,\n    number\n  }\n\n  return(\n    <div>\n      <Header title={'Phonebook'} />\n      <Notification messages={messages} />\n      <SearchForm handleFilterChange={handleFilterChange} value={filter}  />\n      <Contacts messages={messages} setMessages={setMessages} setContacts={setContacts} contacts={contacts} filter={filter} />\n      <Header title={'add a new'} />\n      <ContactForm {...contactFormProps}  />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}